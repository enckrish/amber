// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: pb/analyzer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnalyzerClient is the client API for Analyzer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyzerClient interface {
	AnalyzeLog(ctx context.Context, opts ...grpc.CallOption) (Analyzer_AnalyzeLogClient, error)
}

type analyzerClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyzerClient(cc grpc.ClientConnInterface) AnalyzerClient {
	return &analyzerClient{cc}
}

func (c *analyzerClient) AnalyzeLog(ctx context.Context, opts ...grpc.CallOption) (Analyzer_AnalyzeLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &Analyzer_ServiceDesc.Streams[0], "/Analyzer/analyzeLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &analyzerAnalyzeLogClient{stream}
	return x, nil
}

type Analyzer_AnalyzeLogClient interface {
	Send(*AnalyzerRequest) error
	Recv() (*AnalyzerResponse, error)
	grpc.ClientStream
}

type analyzerAnalyzeLogClient struct {
	grpc.ClientStream
}

func (x *analyzerAnalyzeLogClient) Send(m *AnalyzerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *analyzerAnalyzeLogClient) Recv() (*AnalyzerResponse, error) {
	m := new(AnalyzerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnalyzerServer is the server API for Analyzer service.
// All implementations must embed UnimplementedAnalyzerServer
// for forward compatibility
type AnalyzerServer interface {
	AnalyzeLog(Analyzer_AnalyzeLogServer) error
	mustEmbedUnimplementedAnalyzerServer()
}

// UnimplementedAnalyzerServer must be embedded to have forward compatible implementations.
type UnimplementedAnalyzerServer struct {
}

func (UnimplementedAnalyzerServer) AnalyzeLog(Analyzer_AnalyzeLogServer) error {
	return status.Errorf(codes.Unimplemented, "method AnalyzeLog not implemented")
}
func (UnimplementedAnalyzerServer) mustEmbedUnimplementedAnalyzerServer() {}

// UnsafeAnalyzerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyzerServer will
// result in compilation errors.
type UnsafeAnalyzerServer interface {
	mustEmbedUnimplementedAnalyzerServer()
}

func RegisterAnalyzerServer(s grpc.ServiceRegistrar, srv AnalyzerServer) {
	s.RegisterService(&Analyzer_ServiceDesc, srv)
}

func _Analyzer_AnalyzeLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnalyzerServer).AnalyzeLog(&analyzerAnalyzeLogServer{stream})
}

type Analyzer_AnalyzeLogServer interface {
	Send(*AnalyzerResponse) error
	Recv() (*AnalyzerRequest, error)
	grpc.ServerStream
}

type analyzerAnalyzeLogServer struct {
	grpc.ServerStream
}

func (x *analyzerAnalyzeLogServer) Send(m *AnalyzerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *analyzerAnalyzeLogServer) Recv() (*AnalyzerRequest, error) {
	m := new(AnalyzerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Analyzer_ServiceDesc is the grpc.ServiceDesc for Analyzer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Analyzer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Analyzer",
	HandlerType: (*AnalyzerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "analyzeLog",
			Handler:       _Analyzer_AnalyzeLog_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/analyzer.proto",
}
