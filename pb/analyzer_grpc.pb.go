// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: pb/analyzer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnalyzerClient is the client API for Analyzer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyzerClient interface {
	AdminSetPromptTmpl(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error)
	InitType0(ctx context.Context, in *InitRequest_Type0, opts ...grpc.CallOption) (*InitResponse_Type0, error)
	AnalyzeLog_Type0(ctx context.Context, opts ...grpc.CallOption) (Analyzer_AnalyzeLog_Type0Client, error)
}

type analyzerClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyzerClient(cc grpc.ClientConnInterface) AnalyzerClient {
	return &analyzerClient{cc}
}

func (c *analyzerClient) AdminSetPromptTmpl(ctx context.Context, in *String, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Analyzer/admin_setPromptTmpl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyzerClient) InitType0(ctx context.Context, in *InitRequest_Type0, opts ...grpc.CallOption) (*InitResponse_Type0, error) {
	out := new(InitResponse_Type0)
	err := c.cc.Invoke(ctx, "/Analyzer/init_type0", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyzerClient) AnalyzeLog_Type0(ctx context.Context, opts ...grpc.CallOption) (Analyzer_AnalyzeLog_Type0Client, error) {
	stream, err := c.cc.NewStream(ctx, &Analyzer_ServiceDesc.Streams[0], "/Analyzer/analyzeLog_Type0", opts...)
	if err != nil {
		return nil, err
	}
	x := &analyzerAnalyzeLog_Type0Client{stream}
	return x, nil
}

type Analyzer_AnalyzeLog_Type0Client interface {
	Send(*AnalyzerRequest_Type0) error
	Recv() (*AnalyzerResponse, error)
	grpc.ClientStream
}

type analyzerAnalyzeLog_Type0Client struct {
	grpc.ClientStream
}

func (x *analyzerAnalyzeLog_Type0Client) Send(m *AnalyzerRequest_Type0) error {
	return x.ClientStream.SendMsg(m)
}

func (x *analyzerAnalyzeLog_Type0Client) Recv() (*AnalyzerResponse, error) {
	m := new(AnalyzerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnalyzerServer is the server API for Analyzer service.
// All implementations must embed UnimplementedAnalyzerServer
// for forward compatibility
type AnalyzerServer interface {
	AdminSetPromptTmpl(context.Context, *String) (*Empty, error)
	InitType0(context.Context, *InitRequest_Type0) (*InitResponse_Type0, error)
	AnalyzeLog_Type0(Analyzer_AnalyzeLog_Type0Server) error
	mustEmbedUnimplementedAnalyzerServer()
}

// UnimplementedAnalyzerServer must be embedded to have forward compatible implementations.
type UnimplementedAnalyzerServer struct {
}

func (UnimplementedAnalyzerServer) AdminSetPromptTmpl(context.Context, *String) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminSetPromptTmpl not implemented")
}
func (UnimplementedAnalyzerServer) InitType0(context.Context, *InitRequest_Type0) (*InitResponse_Type0, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitType0 not implemented")
}
func (UnimplementedAnalyzerServer) AnalyzeLog_Type0(Analyzer_AnalyzeLog_Type0Server) error {
	return status.Errorf(codes.Unimplemented, "method AnalyzeLog_Type0 not implemented")
}
func (UnimplementedAnalyzerServer) mustEmbedUnimplementedAnalyzerServer() {}

// UnsafeAnalyzerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyzerServer will
// result in compilation errors.
type UnsafeAnalyzerServer interface {
	mustEmbedUnimplementedAnalyzerServer()
}

func RegisterAnalyzerServer(s grpc.ServiceRegistrar, srv AnalyzerServer) {
	s.RegisterService(&Analyzer_ServiceDesc, srv)
}

func _Analyzer_AdminSetPromptTmpl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyzerServer).AdminSetPromptTmpl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Analyzer/admin_setPromptTmpl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyzerServer).AdminSetPromptTmpl(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analyzer_InitType0_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest_Type0)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyzerServer).InitType0(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Analyzer/init_type0",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyzerServer).InitType0(ctx, req.(*InitRequest_Type0))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analyzer_AnalyzeLog_Type0_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AnalyzerServer).AnalyzeLog_Type0(&analyzerAnalyzeLog_Type0Server{stream})
}

type Analyzer_AnalyzeLog_Type0Server interface {
	Send(*AnalyzerResponse) error
	Recv() (*AnalyzerRequest_Type0, error)
	grpc.ServerStream
}

type analyzerAnalyzeLog_Type0Server struct {
	grpc.ServerStream
}

func (x *analyzerAnalyzeLog_Type0Server) Send(m *AnalyzerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *analyzerAnalyzeLog_Type0Server) Recv() (*AnalyzerRequest_Type0, error) {
	m := new(AnalyzerRequest_Type0)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Analyzer_ServiceDesc is the grpc.ServiceDesc for Analyzer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Analyzer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Analyzer",
	HandlerType: (*AnalyzerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "admin_setPromptTmpl",
			Handler:    _Analyzer_AdminSetPromptTmpl_Handler,
		},
		{
			MethodName: "init_type0",
			Handler:    _Analyzer_InitType0_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "analyzeLog_Type0",
			Handler:       _Analyzer_AnalyzeLog_Type0_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/analyzer.proto",
}
